#!/bin/bash
set -euo pipefail

#################### INPUT AND ERROR HANDLING ########################

WARN=1
CRIT=0
PROTO='-t'
PROTO_HUMAN=tcp
ME="$( basename $0 )"

error() {
    printf "${@}\n" >&2
    exit 3
}

usage() {
    printf "Description:\t$ME checks the number of available real servers for a specified IPVS virtual server.

Usage:\t$ME -v <vip:port> [-t|-u] [-w <number>] [-c <number>]
-v:\tIPv4 address and port of virtual server (Required).
-t:\tSpecify TCP protocol (This is the default).
-u:\tSpecify UDP protocol.
-w:\tWarning threshold for number of real servers (Defaults to 1).
-c:\tCritical threshold for number of real servers (Defaults to 0).
-h:\tThis help.

Usage example: $ME -v 192.168.0.1:80 -t -w1 -c0\n\n" >&2
    exit 3
}

scrape_ipv4_and_port() {
  set +e
  echo $@ | grep -swoE "([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]+"
  set -e
  return $?

}

[[ ! -x $( which ipvsadm ) ]] && error "ipvsadm not found in PATH. Install ipvsadm and run as root."

while getopts ":htuv:w:c:" opt; do
    case $opt in
      t  ) PROTO='-t'; PROTO_HUMAN=tcp ;;
      u  ) PROTO='-u'; PROTO_HUMAN=udp ;;
      v  ) VIRTUAL_SERVER=$OPTARG ;;
      w  ) WARN=$OPTARG ;;
      c  ) CRIT=$OPTARG ;;
      \? ) error "Invalid option: -$OPTARG" ;;
      h  ) usage ;;
      *  ) usage ;;
      :  ) error "Option -$OPTARG requires an argument." ;;
    esac
done

[[ ! -v VIRTUAL_SERVER ]] && usage
scrape_ipv4_and_port $VIRTUAL_SERVER > /dev/null || error "Bad IPv4 address or port: $VIRTUAL_SERVER" 

################## MAIN ###########################

IPVSADM_OUTPUT=$( ipvsadm -L -n $PROTO $VIRTUAL_SERVER 2> /dev/null | tail -n +4 ) || error "Virtual server $VIRTUAL_SERVER/$PROTO_HUMAN not found."
REAL_SERVERS=( $( scrape_ipv4_and_port $IPVSADM_OUTPUT ) ) 
REAL_SERVER_COUNT=${#REAL_SERVERS[@]}

if [[ $REAL_SERVER_COUNT -eq 0 ]]; then
    echo "CRITICAL: virtual_server \"$VIRTUAL_SERVER\" has 0 real_server available!"
    exit 2
        
elif [[ $REAL_SERVER_COUNT -le $CRIT ]]; then
    echo "CRITICAL: virtual_server \"$VIRTUAL_SERVER\" has $REAL_SERVER_COUNT real_server available: ${REAL_SERVERS[@]}"
    exit 2

elif [[ $REAL_SERVER_COUNT -le $WARN ]]; then
    echo "WARNING: virtual_server \"$VIRTUAL_SERVER\" has $REAL_SERVER_COUNT real_server available: ${REAL_SERVERS[@]}"
    exit 1

elif [[ $REAL_SERVER_COUNT -gt $WARN ]]; then
    echo "OK: virtual_server \"$VIRTUAL_SERVER\" has $REAL_SERVER_COUNT real_server available: ${REAL_SERVERS[@]}"
    exit 0

else
    error "Problem running test."
    exit 3

fi

